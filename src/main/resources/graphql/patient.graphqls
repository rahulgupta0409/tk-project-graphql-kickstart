extend type Query{
    getById(id: Int): Patient
    getAllPatient(offset: Int, pageSize: Int): [Patient]
    getAllPatientByName(firstName: String, offset: Int, pageSize: Int): [Patient]
}
extend type Mutation {
    createPatient(patientDto: PatientInputDto): GenericResponse
}

type PatientDto{
    id: Int
    firstName: String
    lastName: String
    dataOfBirth: String
    age: Int
    createdDate: String
    drReferral: String
    totalCost: Int
    isDue: Boolean
    due: Int
    discount: Int
    phoneNumber: String
    emailId: String
    createdBy: String
    createdOn: String
    updatedBy: String
    updatedOn: String
    paidAmount: Int
}
input PatientInputDto{
    id: Int
    firstName: String
    lastName: String
    dataOfBirth: String
    age: Int
    createdDate: String
    drReferral: String
    totalCost: Int
    isDue: Boolean
    due: Int
    discount: Int
    phoneNumber: String
    emailId: String
    createdBy: String
    createdOn: String
    updatedBy: String
    updatedOn: String
    paidAmount: Int
}
type Patient{
    id: Int
    firstName: String
    lastName: String
    dataOfBirth: String
    age: Int
    createdDate: String
    drReferral: String
    totalCost: Int
    isDue: Boolean
    due: Int
    discount: Int
    phoneNumber: String
    emailId: String
    createdBy: String
    createdOn: String
    updatedBy: String
    updatedOn: String
    paidAmount: Int
}

type GenericResponse{
    status: String
    message: String
    updatedBy: String
    updatedOn: String
}

type PatientOutputDto{
    id: Int
    firstName: String
    lastName: String
    dataOfBirth: String
    age: Int
    createdDate: String
    drReferral: String
    totalCost: Int
    isDue: Boolean
    due: Int
    discount: Int
    phoneNumber: String
    emailId: String
    createdBy: String
    createdOn: String
    updatedBy: String
    updatedOn: String
    paidAmount: Int

}